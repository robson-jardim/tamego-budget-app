service cloud.firestore {
    match /databases/{database}/documents {

        match /users/{userId} {
            allow get: if request.auth.uid == userId;
        }

        match /budgets/{budgetId} {

            allow read: if
                        isSignedIn() &&
                        existingData().userId == request.auth.uid &&
                        isPremium();

            allow create: if
                        isSignedIn() &&
                        incomingData().userId == request.auth.uid &&
                        validateBudgetSchema() &&
                        isPremium();

            allow update: if
                        isSignedIn() &&
                        incomingData().userId == existingData().userId &&
                        incomingData().timeCreated == existingData().timeCreated &&
                        validateBudgetSchema() &&
                        isPremium();

            allow delete: if false;

            function validateBudgetSchema() {
                return incomingData().keys().hasAll(['userId', 'budgetName', 'currencyCode', 'timeCreated', 'lastVisited']) &&
                    incomingData().size() == 5 &&
                    incomingData().userId is string &&
                    (incomingData().budgetName is string && noLeadingOrTrailingSpaces(incomingData().budgetName) && notEmptyString(incomingData().budgetName)) &&
                    (incomingData().currencyCode is string && validCurrencyCode(incomingData().currencyCode)) &&
                    incomingData().timeCreated is timestamp &&
                    incomingData().lastVisited is timestamp;
            }

            function validCurrencyCode(code) {
                return code in ['USD'];
            }

            match /payees/{payeeId} {
                allow read: if
                            isSignedIn() &&
                            isBudgetOwner() &&
                            isPremium();

                allow create, update: if
                            isSignedIn() &&
                            validatePayeeSchema() &&
                            isBudgetOwner() &&
                            isPremium();

                allow delete: if false;

                function validatePayeeSchema() {
                    return incomingData().keys().hasAll(['payeeName']) &&
                        incomingData().size() == 1 &&
                        (incomingData().payeeName is string && noLeadingOrTrailingSpaces(incomingData().payeeName) && notEmptyString(incomingData().payeeName));
                }
            }

            match /accounts/{accountId} {
                allow read: if
                            isSignedIn() &&
                            isBudgetOwner() &&
                            isPremium();

                allow create, update: if
                            isSignedIn() &&
                            validateAccountSchema() &&
                            isBudgetOwner() &&
                            isPremium();

                allow delete: if false;

                function validateAccountSchema() {
                    return incomingData().keys().hasAll(['accountName', 'position']) &&
                        incomingData().size() == 2 &&
                        (incomingData().accountName is string && noLeadingOrTrailingSpaces(incomingData().accountName) && notEmptyString(incomingData().accountName)) &&
                        (incomingData().position is int && incomingData().position >= 0);
                }
            }

            match /categoryGroups/{groupId} {
                allow read: if
                            isSignedIn() &&
                            isBudgetOwner() &&
                            isPremium();

                allow create, update: if
                            isSignedIn() &&
                            validateGroupSchema() &&
                            isBudgetOwner() &&
                            isPremium();

                allow delete: if false;

                function validateGroupSchema() {
                    return incomingData().keys().hasAll(['groupName', 'position']) &&
                        incomingData().size() == 2 &&
                        (incomingData().groupName is string && noLeadingOrTrailingSpaces(incomingData().groupName) && notEmptyString(incomingData().groupName)) &&
                        (incomingData().position is int && incomingData().position >= 0);
                }
            }

            match /categories/{categoryId} {
                allow read: if
                            isSignedIn() &&
                            isBudgetOwner() &&
                            isPremium();

                allow create, update: if
                            isSignedIn() &&
                            validateCategoriesSchema() &&
                            groupExists(incomingData().groupId) &&
                            isBudgetOwner() &&
                            isPremium();

                allow delete: if false;

                function validateCategoriesSchema() {
                    return incomingData().keys().hasAll(['groupId', 'categoryName', 'position']) &&
                        incomingData().size() == 3 &&
                        incomingData().groupId is string &&
                        (incomingData().categoryName is string && noLeadingOrTrailingSpaces(incomingData().categoryName) && notEmptyString(incomingData().categoryName)) &&
                        (incomingData().position is int && incomingData().position >= 0);
                }
            }

            match /categoryValues/{categoryValueId} {
                allow read: if
                            isSignedIn() &&
                            isBudgetOwner() &&
                            isPremium();

                allow create: if
                            isSignedIn() &&
                            validateValuesSchema() &&
                            categoryExists(incomingData().categoryId) &&
                            isBudgetOwner() &&
                            isPremium();

                allow update: if
                            isSignedIn() &&
                            validateValuesSchema() &&
                            incomingData().budgetMonth == existingData().budgetMonth &&
                            incomingData().categoryId == existingData().categoryId &&
                            isBudgetOwner() &&
                            isPremium();

                allow delete: if
                            isSignedIn() &&
                            isBudgetOwner() &&
                            isPremium();

                function validateValuesSchema() {
                    return incomingData().keys().hasAll(['categoryId', 'budgeted', 'offset', 'budgetMonth']) &&
                        incomingData().size() == 4 &&
                        incomingData().categoryId is string &&
                        incomingData().budgeted is number &&
                        incomingData().offset is number &&
                        incomingData().budgetMonth is timestamp
                }
            }

            match /transactions/{transactionId} {
                allow read, delete: if
                            isSignedIn() &&
                            isBudgetOwner() &&
                            isPremium();

                allow create, update: if
                            isSignedIn() &&
                            validateTransactionSchema() &&
                            isBudgetOwner() &&
                            isPremium();

                            // Firestore security rules allow for only 3 get() / exists() function calls.
                            // Checking if foreign keys exists must be done inside Firestore triggers for
                            // lazy validation

                function validateTransactionSchema() {
                    return incomingData().keys().hasAll(['transactionDate', 'accountId', 'payeeId', 'categoryId', 'splits', 'memo', 'amount', 'cleared', 'locked']) &&
                        incomingData().size() == 9 &&
                        incomingData().transactionDate is timestamp &&
                        incomingData().accountId is string &&
                        (incomingData().payeeId == null || incomingData().payeeId is string) &&
                        (incomingData().categoryId == null || incomingData().categoryId is string) &&
                        (incomingData().splits is list && incomingData().splits.size() == 0) &&
                        (incomingData().memo == null || (incomingData().memo is string && noLeadingOrTrailingSpaces(incomingData().memo) && notEmptyString(incomingData().memo)) && incomingData().memo.size() < 255) &&
                        incomingData().amount is number &&
                        incomingData().cleared is bool &&
                        incomingData().locked is bool;
                }
            }

            match /reoccurringTransactions/{reoccurringTransactionsId} {
                 allow read, delete: if
                             isSignedIn() &&
                             isBudgetOwner() &&
                             isPremium();

                 allow create, update: if
                             isSignedIn() &&
                             validateReoccurringTransactionSchema() &&
                             isBudgetOwner() &&
                             isPremium();

                             // Firestore security rules allow for only 3 get() / exists() function calls.
                             // Checking if foreign keys exists must be done inside Firestore triggers for
                             // lazy validation

                 function validateReoccurringTransactionSchema() {
                     return incomingData().keys().hasAll(['transactionDate', 'accountId', 'payeeId', 'categoryId', 'splits', 'memo', 'amount', 'cleared', 'locked', 'reoccurringSchedule']) &&
                         incomingData().size() == 10 &&
                         incomingData().transactionDate is timestamp &&
                         incomingData().accountId is string &&
                         (incomingData().payeeId == null || incomingData().payeeId is string) &&
                         (incomingData().categoryId == null || incomingData().categoryId is string) &&
                         (incomingData().splits is list && incomingData().splits.size() == 0) &&
                         (incomingData().memo == null || (incomingData().memo is string && noLeadingOrTrailingSpaces(incomingData().memo) && notEmptyString(incomingData().memo)) && incomingData().memo.size() < 255) &&
                         incomingData().amount is number &&
                         (incomingData().cleared is bool && incomingData().cleared == false) &&
                         (incomingData().locked is bool && incomingData().locked == false) &&
                         (incomingData().reoccurringSchedule is string && validSchedule(incomingData().reoccurringSchedule));
                 }
            }

            match /transfers/{transferId} {
                allow read, delete: if
                                isSignedIn() &&
                                isBudgetOwner() &&
                                isPremium();

//                 allow create, update: if
//                                 isSignedIn() &&
//                                 validateTransferSchema() &&
//                                 isBudgetOwner() &&
//                                 isPremium();

//                                 // Firestore security rules allow for only 3 get() / exists() function calls.
//                                 // Checking if foreign keys exists must be done inside Firestore triggers for
//                                 // lazy validation

//                 function validateTransferSchema() {
//                     return incomingData().keys().hasAll(['transactionDate', 'originAccountId', 'destinationAccountId', 'memo', 'amount', 'clearedOrigin', 'clearedDestination', 'lockedOrigin', 'lockedDestination']) &&
//                         incomingData().size() == 9 &&
//                         incomingData().transactionDate is timestamp &&
//                         incomingData().originAccountId is string &&
//                         incomingData().destinationAccountId is string &&
//                         (incomingData().memo == null || (incomingData().memo is string && noLeadingOrTrailingSpaces(incomingData().memo) && notEmptyString(incomingData().memo)) && incomingData().memo.size() < 255) &&
//                         incomingData().amount is number &&
//                         incomingData().clearedOrigin is bool &&
//                         incomingData().clearedDestination is bool &&
//                         incomingData().lockedOrigin is bool &&
//                         incomingData().lockedDestination is bool;
//                 }
            }

            match /reoccurringTransfers/{reoccurringTransferId} {
                allow read, delete: if
                                isSignedIn() &&
                                isBudgetOwner() &&
                                isPremium();

//                 allow create, update: if
//                                 isSignedIn() &&
//                                 validateReoccurringTransferSchema() &&
//                                 isBudgetOwner() &&
//                                 isPremium();

//                                 // Firestore security rules allow for only 3 get() / exists() function calls.
//                                 // Checking if foreign keys exists must be done inside Firestore triggers for
//                                 // lazy validation

//                 function validateReoccurringTransferSchema() {
//                     return incomingData().keys().hasAll(['transactionDate', 'originAccountId', 'destinationAccountId', 'memo', 'amount', 'clearedOrigin', 'clearedDestination', 'lockedOrigin', 'lockedDestination', 'reoccurringSchedule']) &&
//                         incomingData().size() == 10 &&
//                         incomingData().transactionDate is timestamp &&
//                         incomingData().originAccountId is string &&
//                         incomingData().destinationAccountId is string &&
//                         (incomingData().memo == null || (incomingData().memo is string && noLeadingOrTrailingSpaces(incomingData().memo) && notEmptyString(incomingData().memo)) && incomingData().memo.size() < 255) &&
//                         incomingData().amount is number &&
//                         (incomingData().clearedOrigin is bool && incomingData().clearedOrigin == false) &&
//                         (incomingData().clearedDestination is bool && incomingData().clearedDestination == false) &&
//                         (incomingData().lockedOrigin is bool && incomingData().lockedOrigin == false) &&
//                         (incomingData().lockedDestination is bool && incomingData().lockedDestination == false) &&
//                         (incomingData().reoccurringSchedule is string && validSchedule(incomingData().reoccurringSchedule));
//                 }
            }

            function isSignedIn() {
                return request.auth != null;
            }

            function isPremium() {
                return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isPremium == true;
            }

            function isBudgetOwner() {
                return get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
            }

            function groupExists(groupId) {
                return exists(/databases/$(database)/documents/budgets/$(budgetId)/categoryGroups/$(groupId));
            }

            function categoryExists(categoryId) {
                return exists(/databases/$(database)/documents/budgets/$(budgetId)/categories/$(categoryId));
            }

            function accountExists(accountId) {
                return exists(/databases/$(database)/documents/budgets/$(budgetId)/accounts/$(accountId));
            }

            function payeeExists(payeeId) {
                return exists(/databases/$(database)/documents/budgets/$(budgetId)/payees/$(payeeId));
            }

            function validSchedule(schedule) {
                return schedule in ['DAILY', 'WEEKLY', 'EVERY_OTHER_WEEK', 'MONTHLY', 'YEARLY'];
            }

            function noLeadingOrTrailingSpaces(str) {
                return str.size() == str.trim().size();
            }

            function notEmptyString(str) {
                return str.size() > 0;
            }

            function existingData() {
                return resource.data;
            }

            function incomingData() {
                return request.resource.data;
            }

        }
    }
}
