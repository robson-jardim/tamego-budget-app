service cloud.firestore {
    match /databases/{database}/documents {

        match /users/{userId} {
            allow get: if request.auth.uid == userId;
        }

        match /budgets/{budgetId} {

            // Cannot use get() on current document when document already exists in resource?
            allow read: if resource.data.userId == request.auth.uid;
            allow create: if request.auth.uid == request.resource.data.userId;

            match /accounts/{accountId} {
                allow read, create, update: if userOwnsBudget();
                //Don't allow direct delete, must delete dependencies first
            }

            match /transactions/{transactionId} {
                allow read, write: if userOwnsBudget();
                //Don't allow delete, splits are tied to transaction
            }

            match /transferTransactions/{transferId} {
                allow read, write: if userOwnsBudget();
            }

            match /splitTransactions/{splitTransactionId} {
                allow read, write: if userOwnsBudget();
            }

            match /categoryGroups/{groupId} {
                allow read, create, update: if userOwnsBudget();
                //Don't allow delete, categories are tied to group
            }

            match /categories/{categoryId} {
                allow read, create, update: if userOwnsBudget();
                //Don't allow delete, transactions are tied to category
            }

            match /categoryValues/{categoryValueId} {
                allow read: if userOwnsBudget();
                allow create: if userOwnsBudget() && validateValueSchema();
                allow update: if userOwnsBudget() && validateValueSchema() && isNotEditingTime() && isNotEditingCategoryId();
                allow delete: if userOwnsBudget();

                function isNotEditingTime() {
                    return request.resource.data.budgetMonth == resource.data.budgetMonth;
                }

                function isNotEditingCategoryId() {
                    return request.resource.data.categoryId == resource.data.categoryId;
                }

                function validateValueSchema() {
                    return request.resource.data.keys().hasAll(['budgeted', 'offset', 'categoryId', 'budgetMonth'])
                        && request.resource.data.size() == 4
                        && request.resource.data.budgeted is number
                        && request.resource.data.offset is number
                        && request.resource.data.categoryId is string
                        && request.resource.data.budgetMonth is timestamp
                }
            }

            function userOwnsBudget() {
                return get(/databases/$(database)/documents/budgets/$(budgetId)).data.userId == request.auth.uid;
            }
        }
    }
}
